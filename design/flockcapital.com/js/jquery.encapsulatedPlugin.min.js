/**
 * Plugin generator plugin. Doesn't allow for chaining directly, but preserves public
 * methods and namespaces, and supports multiple elements.
 * 
 * @copyright Jamie Talbot 2010 (http://jamietalbot.com)
 * Licensed as per jQuery (http://jquery.org/license).  Keep my name and you're all good :)
 *
 * Example Usage:
 *
 * Step 1: Define your plugin interface
 * ------------------------------------
 *
 * MyPluginDefinition = function() {
 *	
 *	var _privateMember;
 *	
 *	function _privateMethod() {}
 *
 *	return {
 *		setup: function() {
 *			// Initialisation Code
 *		},
 *		
 *		publicMethodWithArguments: function(name) {
 *			console.log(name);
 *		},
 *
 * 		publicMethod: function() {}
 *	}
 * }
 *
 * Step 2: Register your plugin
 * ----------------------------
 *
 * $.fn.myplugin = function(options) {
 *	return $.fn.encapsulatedPlugin('myplugin', MyPluginDefinition, this, options);
 * };
 * 
 * Step 3: Profit
 * --------------
 *
 * $('#foo').myplugin().publicMethod();
 * $('#bar').myplugin().publicMethodWithArguments('Jamie');
 *
 */(function(e){e.fn.encapsulatedPlugin=function(t,n,r,i){function s(e,t){return function(){for(var n=0;n<t.length;n++)t[n][e].apply(t[n][e],arguments)}}var o=[];r.each(function(){var r=e(this);if(!r.data(t)){var s=new n(this,i);s.setup&&s.setup();r.data(t,s)}o.push(r.data(t))});o=e(o);var u=o[0];if(u)for(var a in u)typeof u[a]=="function"&&(o[a]=s(a,o));o.$=r;return o}})(jQuery);